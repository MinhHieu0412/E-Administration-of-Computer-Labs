@model E_Administration.Models.User

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Areas/User/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Edit Profile</h3>
        </div>
        <div class="card-body">
            <form id="editProfileForm" asp-action="Edit" method="post" enctype="multipart/form-data" novalidate>
                <div class="text-center mb-4">
                    <img id="profileImagePreview"
                         src="@(!string.IsNullOrEmpty(Model.Image) ? Model.Image : "~/images/default-profile.png")"
                         alt="Profile Image"
                         class="rounded-circle"
                         style="width: 150px; height: 150px; object-fit: cover;" />
                </div>

                <div class="form-group mb-3">
                    <label for="ImageFile" class="form-label">Profile Image</label>
                    <input type="file" id="ImageFile" name="ImageFile" class="form-control" accept=".jpg,.jpeg,.png" />
                    <span id="imageError" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="UserName" class="form-label">User Name</label>
                    <input asp-for="UserName" id="UserName" class="form-control" placeholder="Enter your username" />
                    <span id="userNameError" class="text-danger" asp-validation-for="UserName"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Email" class="form-label">Email</label>
                    <input asp-for="Email" id="Email" type="email" class="form-control" placeholder="Enter your email" />
                    <span id="emailError" class="text-danger" asp-validation-for="Email"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Password" class="form-label">Current Password</label>
                    <input asp-for="Password" id="Password" type="password" class="form-control" placeholder="Enter your current password" />
                    <span id="passwordError" class="text-danger" asp-validation-for="Password"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="NewPassword" class="form-label">New Password</label>
                    <input asp-for="NewPassword" id="NewPassword" type="password" class="form-control" placeholder="Enter a new password" />
                    <span id="newPasswordError" class="text-danger" asp-validation-for="NewPassword"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="ConfirmPassword" class="form-label">Confirm New Password</label>
                    <input asp-for="ConfirmPassword" id="ConfirmPassword" type="password" class="form-control" placeholder="Confirm your new password" />
                    <span id="confirmPasswordError" class="text-danger" asp-validation-for="ConfirmPassword"></span>
                </div>

                <div class="d-flex justify-content-between">
                    <a asp-action="Details" asp-route-id="@Model.ID" class="btn btn-secondary">Cancel</a>
                    <button type="submit" class="btn btn-success">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.getElementById('ImageFile').addEventListener('change', function () {
        const imageFile = this.files[0];
        const allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
        const profileImagePreview = document.getElementById('profileImagePreview');
        const imageError = document.getElementById('imageError');

        // Clear previous error message
        imageError.innerText = '';

        if (imageFile) {
            if (!allowedExtensions.exec(imageFile.name)) {
                imageError.innerText = 'Only .jpg, .jpeg, and .png files are allowed.';
                this.value = ''; // Clear the file if it's not valid
                return;
            } else if (imageFile.size > 2 * 1024 * 1024) { // 2MB file size limit
                imageError.innerText = 'File size must be less than 2MB.';
                this.value = ''; // Clear the file if it's too large
                return;
            } else {
                // Update image preview
                const reader = new FileReader();
                reader.onload = function (e) {
                    profileImagePreview.src = e.target.result;
                };
                reader.readAsDataURL(imageFile);
            }
        }
    });

    document.getElementById('editProfileForm').addEventListener('submit', function (e) {
        let isValid = true;

        // Clear previous error messages
        const errorMessages = {
            userName: 'userNameError',
            email: 'emailError',
            password: 'passwordError',
            newPassword: 'newPasswordError',
            confirmPassword: 'confirmPasswordError',
            image: 'imageError'
        };

        for (const key in errorMessages) {
            document.getElementById(errorMessages[key]).innerText = '';
        }

        // Validate Username
        const userName = document.getElementById('UserName').value.trim();
        if (userName === '') {
            document.getElementById('userNameError').innerText = 'User name is required.';
            isValid = false;
        }

        // Validate Email
        const email = document.getElementById('Email').value.trim();
        const emailRegex = @Html.Raw(" /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ ");
        if (email === '') {
            document.getElementById('emailError').innerText = 'Email is required.';
            isValid = false;
        } else if (!emailRegex.test(email)) {
            document.getElementById('emailError').innerText = 'Please enter a valid email address.';
            isValid = false;
        }

        

        // Validate New Password
        const newPassword = document.getElementById('NewPassword').value.trim();
        if (newPassword.length > 0 && newPassword.length < 6) {
            document.getElementById('newPasswordError').innerText = 'New password must be at least 6 characters.';
            isValid = false;
        }

        // Validate Confirm Password
        const confirmPassword = document.getElementById('ConfirmPassword').value.trim();
        if (newPassword && newPassword !== confirmPassword) {
            document.getElementById('confirmPasswordError').innerText = 'New password and Confirm password do not match.';
            isValid = false;
        }

        // Prevent form submission if validation fails
        if (!isValid) {
            e.preventDefault();
        }
    });
</script>
